#include <bits/stdc++.h>
using namespace std ;
typedef long long ll ;
typedef long double ld ;
typedef unsigned long long ull ;
#ifdef _WIN32
#define LLD "%I64d"
#else
#define LLD "%lld"
#endif
#define pi (acos(-1.0))
#define F first
#define S second
#define lson (o<<1),l,mid
#define rson (o<<1|1),mid+1,r
#define MP make_pair
const double eps = 1e-9 ;
const int inf = 0x3f3f3f3f ;
const ll INF = (ll)1e18 ;

const int M = 1000000+10 ;
char s[M] ;
int nxt[M] ;
int lens ;

void get_nxt () {
	lens = strlen (s) ;
	nxt[0] = -1 ;
	for (int i = 1 , j = -1 ; i < lens ; i ++) {
		while (j!=-1 && s[i]!=s[j+1]) j=nxt[j] ;
		nxt[i] = s[i]==s[j+1]?++j:-1 ;
	}
}

inline int add (int a , int b) {
	a += b ;
	return a>=lens?a-lens:a ; 
}

int minway () {
	int i = 0 , j = 1 , k = 0;
	while (i<lens&&j<lens&&k<lens) {
		int tmp=s[(i+k)%lens]-s[(j+k)%lens] ;
		if (tmp==0) k ++ ;
		else {
			if (tmp>0) i += k+1 ;
			else j += k+1 ;
			if (i==j) j ++ ;
			k = 0 ;
		}
	}
	return min(i,j)+1 ;
}

int maxway () {
	int i = 0 , j = 1 , k = 0 ; 
	while (i<lens&&j<lens&&k<lens) {
		int tmp=s[(i+k)%lens]-s[(j+k)%lens] ;
		if (tmp==0) k ++ ;
		else {
			if (tmp<0) i+=k+1 ;
			else j+=k+1 ;
			if (i==j) j++ ;
			k = 0 ;
		}
	}
	return min(i,j)+1 ;
}

int main () {
	while (~ scanf ("%s" , s)) {
		get_nxt () ;
		int cycle = lens-1-nxt[lens-1] ;
		if (lens%cycle || cycle==lens) 
			printf ("%d %d %d %d\n" , maxway() , 1 , minway() , 1) ;
		else 
			printf ("%d %d %d %d\n" , maxway() ,lens/cycle,minway(),lens/cycle) ;
	}
	return 0 ;
}

